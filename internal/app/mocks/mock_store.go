// Code generated by MockGen. DO NOT EDIT.
// Source: go-axesthump-shortener/internal/app/repository (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	repository "go-axesthump-shortener/internal/app/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepository)(nil).Close))
}

// CreateShortURL mocks base method.
func (m *MockRepository) CreateShortURL(arg0 context.Context, arg1, arg2 string, arg3 uint32) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURL indicates an expected call of CreateShortURL.
func (mr *MockRepositoryMockRecorder) CreateShortURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURL", reflect.TypeOf((*MockRepository)(nil).CreateShortURL), arg0, arg1, arg2, arg3)
}

// CreateShortURLs mocks base method.
func (m *MockRepository) CreateShortURLs(arg0 context.Context, arg1 string, arg2 []repository.URLWithID, arg3 uint32) ([]repository.URLWithID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortURLs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]repository.URLWithID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortURLs indicates an expected call of CreateShortURLs.
func (mr *MockRepositoryMockRecorder) CreateShortURLs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortURLs", reflect.TypeOf((*MockRepository)(nil).CreateShortURLs), arg0, arg1, arg2, arg3)
}

// DeleteURLs mocks base method.
func (m *MockRepository) DeleteURLs(arg0 []repository.DeleteURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURLs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLs indicates an expected call of DeleteURLs.
func (mr *MockRepositoryMockRecorder) DeleteURLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLs", reflect.TypeOf((*MockRepository)(nil).DeleteURLs), arg0)
}

// GetAllURLs mocks base method.
func (m *MockRepository) GetAllURLs(arg0 context.Context, arg1 string, arg2 uint32) []repository.URLInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURLs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]repository.URLInfo)
	return ret0
}

// GetAllURLs indicates an expected call of GetAllURLs.
func (mr *MockRepositoryMockRecorder) GetAllURLs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURLs", reflect.TypeOf((*MockRepository)(nil).GetAllURLs), arg0, arg1, arg2)
}

// GetFullURL mocks base method.
func (m *MockRepository) GetFullURL(arg0 context.Context, arg1 int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFullURL indicates an expected call of GetFullURL.
func (mr *MockRepositoryMockRecorder) GetFullURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullURL", reflect.TypeOf((*MockRepository)(nil).GetFullURL), arg0, arg1)
}
